{{- $configsha := tpl (include "k8s-python.config" .) . | sha256sum }}
{{- $configshamini := substr 0 8 $configsha }}
{{- $volumesha := tpl (toYaml .Values.volumes) . | sha256sum }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "k8s-python.fullname" . }}
  labels:
    {{- include "k8s-python.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      component: service-pod
      {{- include "k8s-python.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ $configsha }}
        checksum/volumes: {{ $volumesha }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        component: service-pod
        {{- include "k8s-python.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "k8s-python.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes: {{- include "k8s-python.volumes" . | nindent 8 }}
      containers:
        - name: k8s-python
          env: {{- include "k8s-python.env" . | nindent 10 }}
          command: {{- .Values.command | toYaml | nindent 10 }}
          {{- with .Values.args }}
          args: {{- toYaml . | nindent 10 }}
          {{- end }}
          volumeMounts: {{- include "k8s-python.volumeMounts" . | nindent 10 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default  .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http-health
              containerPort: 8079
              protocol: TCP
            - name: http-web
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              httpGet:
                port: http-health
                path: "/hams/stop"
          # NOT using startupProbe as it provides us no benefit here. AND detrimetally provides a fake positive start.
          # startupProbe:
          #   httpGet:
          #     port: http-health
          #     path: "/hams/startup"
          #   failureThreshold: {{ .Values.health.startupProbe.failureThreshold }}
          #   periodSeconds: {{ .Values.health.startupProbe.periodSeconds }}
          livenessProbe:
            httpGet:
              port: http-health
              path: "/hams/alive"
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.health.livenessProbe.initialDelaySeconds }}
          readinessProbe:
            httpGet:
              port: http-health
              path: "/hams/ready"
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
